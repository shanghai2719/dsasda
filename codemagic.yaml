workflows:
  macos_vps_247:
    name: "macOS M4 VPS Loop Runner (auto-restart by hours)"
    max_build_duration: 120   # gi·ªõi h·∫°n Codemagic (2 gi·ªù)
    instance_type: mac_mini_m2
    environment:
      vars:
        LOOP_FILE: "loop.py"
        PERSIST_PATH: "/Users/builder/.persist_data"
        MAX_HOURS: "1.8"  # restart sau 1h48m ƒë·ªÉ tr√°nh timeout
        CM_API_TOKEN: Encrypted(THAY_TOKEN_T·∫†I_ƒê√ÇY)
        CM_APP_ID: "68e55d53dd7c70195324202b"   # thay b·∫±ng App ID c·ªßa b·∫°n
        CM_WORKFLOW_ID: "macos_vps_247"
      xcode: latest
    triggering:
      events:
        - push

    scripts:
      - name: üß± Setup m√¥i tr∆∞·ªùng
        script: |
          echo "=== Setup Python v√† th∆∞ m·ª•c l∆∞u data ==="
          brew install python@3.12 || echo "Python c√≥ s·∫µn"
          mkdir -p $PERSIST_PATH

      - name: üêç T·∫°o file loop Python
        script: |
          cat > $LOOP_FILE <<'PYCODE'
          import os, time, datetime, json, subprocess

          DATA_PATH = os.environ.get("PERSIST_PATH", "/Users/builder/.persist_data")
          LOG_FILE = os.path.join(DATA_PATH, "loop_log.json")
          MAX_HOURS = float(os.environ.get("MAX_HOURS", "1.8"))  # 1.8h = ~108 ph√∫t
          RUNTIME_LIMIT = MAX_HOURS * 3600

          print("üåÄ VPS Loop Runner kh·ªüi ƒë·ªông...")
          start_time = time.time()
          os.makedirs(DATA_PATH, exist_ok=True)

          try:
              while True:
                  uptime = time.time() - start_time
                  now = datetime.datetime.now().isoformat()
                  remaining = RUNTIME_LIMIT - uptime

                  print(f"[{now}] ƒêang ch·∫°y {uptime/3600:.2f}h (c√≤n {remaining/60:.1f} ph√∫t).")

                  # Ghi log m·ªói 5 ph√∫t
                  if int(uptime) % 300 < 60:
                      with open(LOG_FILE, "a") as f:
                          f.write(json.dumps({"time": now, "uptime_hr": uptime/3600}) + "\n")

                  if uptime >= RUNTIME_LIMIT:
                      print(f"üîÅ ƒê·∫°t gi·ªõi h·∫°n {MAX_HOURS}h ‚Üí chu·∫©n b·ªã restart Codemagic build...")
                      break

                  time.sleep(60)

          except Exception as e:
              print(f"‚ùå L·ªói loop: {e}")

          # === G·ª¨I L·ªÜNH RESTART ===
          token = os.environ.get("CM_API_TOKEN")
          app_id = os.environ.get("CM_APP_ID")
          workflow_id = os.environ.get("CM_WORKFLOW_ID", "macos_vps_247")

          if token and app_id:
              print("üì° G·ª≠i y√™u c·∫ßu kh·ªüi ƒë·ªông l·∫°i build t·ªõi Codemagic API...")
              payload = json.dumps({"appId": app_id, "workflowId": workflow_id})
              cmd = [
                  "curl", "-sS", "-X", "POST",
                  "https://api.codemagic.io/builds",
                  "-H", "Content-Type: application/json",
                  "-H", f"x-auth-token: {token}",
                  "-d", payload
              ]
              result = subprocess.run(cmd, capture_output=True, text=True)
              print("Ph·∫£n h·ªìi API:", result.stdout or result.stderr)
          else:
              print("‚ö†Ô∏è Thi·∫øu CM_API_TOKEN ho·∫∑c CM_APP_ID ‚Äî kh√¥ng th·ªÉ t·ª± restart.")
          PYCODE

      - name: üöÄ Ch·∫°y loop
        script: |
          echo "=== B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p VPS ==="
          python3 $LOOP_FILE
